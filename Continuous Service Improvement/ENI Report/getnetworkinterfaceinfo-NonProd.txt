import boto3
import subprocess, csv, os, json
import argparse, logging

# Enable Logging
logging.basicConfig(filename='GetNetworkInterfaceDetailsAllAccountsOU.log', level=logging.INFO)

# Define the Global variable here
subprocess.call(["clear"], shell=True)
field_names = ['Account', 'Network_Interface_Id', 'Subnet_Id', 'VPC_Id', 'Availability_Zone', 'Description', 'Status', 'Owner', 'Team', 'Instance_Id']
rows = []

# Define the list of specific accounts you want to fetch ENIs from
specific_accounts = [
    "882621900145",
    "606705429532",
    "730335256955",
    "919756165425",
    "572467241574",
    "513869633192",
    "675637567284",
    "664837982430",
    "725624145255",
    "214315369892"
]

# Function to only return specific account
def getallAccounts():
    print('Fetching ENI Report from Predefined AWS Accounts')
    # Use the predefined list of accounts instead of fetching from AWS Organizations
    accountList = specific_accounts
    logging.info(f"Using the predefined account list: {accountList}")
    return accountList

# Function to assume role for a given account
def assume_role(target_account, role):
    sts = boto3.client('sts')
    try:
        assume_role_object = sts.assume_role(
            RoleArn="arn:aws:iam::" + target_account + ":role/" + role,
            RoleSessionName='AssumingCrossAccountRole'
        )
    except Exception as err:
        logging.error("Error occurred while assuming role: {}".format(err))
        return False
    
    role_dict = dict()
    role_dict['AccessKeyId'] = assume_role_object['Credentials']['AccessKeyId']
    role_dict['SecretAccessKey'] = assume_role_object['Credentials']['SecretAccessKey']
    role_dict['SessionToken'] = assume_role_object['Credentials']['SessionToken']
    return role_dict

# Function to get all regions
def get_all_regions():
    ec2 = boto3.client('ec2')
    regions = ec2.describe_regions()['Regions']
    return [region['RegionName'] for region in regions]

# Function to get the list of network interfaces for given account and region
def getallnetworkinterfaces(act, client, region):
    logging.info(f"Describing network interfaces for account {act} in region {region}")
    response = client.describe_network_interfaces(MaxResults=500)
    networkInterfaceList = response.get("NetworkInterfaces", [])
    logging.info(f'Number of Network Interfaces fetched in region {region}: {len(networkInterfaceList)}')

    if len(networkInterfaceList) != 0:
        for ni in networkInterfaceList:
            if "Tags" in ni:
                tags = ni['Tags']
            else:
                tags = None
            build_rows_dictionary(act, ni['NetworkInterfaceId'], ni['SubnetId'], ni['VpcId'], ni['AvailabilityZone'], ni['Description'], ni['Status'], tags)

        while ('NextToken' in response):
            response = client.describe_network_interfaces(MaxResults=500, NextToken=response['NextToken'])
            networkInterfaceList = response.get("NetworkInterfaces", [])
            logging.info(f'Number of Network Interfaces fetched in region {region}: {len(networkInterfaceList)}')
            if len(networkInterfaceList) != 0:
                for ni in networkInterfaceList:
                    if "Tags" in ni:
                        tags = ni['Tags']
                    else:
                        tags = None
                    build_rows_dictionary(act, ni['NetworkInterfaceId'], ni['SubnetId'], ni['VpcId'], ni['AvailabilityZone'], ni['Description'], ni['Status'], tags)
    else:
        logging.info(f'No network interfaces found for account {act} in region {region}')

# Function to build dictionary with required fields on network interfaces
def build_rows_dictionary(account, network_interface_id, subnet_id, vpc_id, availability_zone, description, status, tags):
    row_dict = {}
    row_dict["Account"] = account
    row_dict["Network_Interface_Id"] = network_interface_id
    row_dict["Subnet_Id"] = subnet_id
    row_dict["VPC_Id"] = vpc_id
    row_dict["Availability_Zone"] = availability_zone
    row_dict["Description"] = description
    row_dict["Status"] = status
    if tags:
        for x in tags:
            if x['Key'] == "Owner":
                row_dict["Owner"] = x['Value']
            elif x['Key'] == "Team":
                row_dict["Team"] = x['Value']
            elif x['Key'] == "instance_id":
                row_dict["Instance_Id"] = x['Value']
    rows.append(row_dict)

# Function to write dictionary to CSV
def write_csv(filepath):
    with open(filepath, 'w') as f:
        csv_writer = csv.DictWriter(f, fieldnames=field_names)
        csv_writer.writeheader()
        csv_writer.writerows(rows)

def main():
    sts_client = boto3.client("sts")
    current_account = sts_client.get_caller_identity()["Account"]
    
    # Get list of all regions
    regions = get_all_regions()

    if arole:
        accounts = getallAccounts()
        logging.info(f'Accounts found --> {len(accounts)}')
        for act in accounts:
            if act == current_account or act == None:
                logging.info("Account number " + act)
            else:
                logging.info("Account number " + act)
                credentials = assume_role(act, arole)
                try:
                    for region in regions:
                        client = boto3.client('ec2', 
                            region_name=region,
                            aws_access_key_id=credentials['AccessKeyId'],
                            aws_secret_access_key=credentials['SecretAccessKey'],
                            aws_session_token=credentials['SessionToken'])
                        getallnetworkinterfaces(act, client, region)
                except Exception as e:
                    logging.info(f"Can't assume the role in account {act}: {e}")
                    continue
    else:
        for region in regions:
            client = boto3.client('ec2', region_name=region)
            getallnetworkinterfaces(current_account, client, region)
    
    write_csv(file)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Creates a CSV report about Network Interfaces across specific accounts and regions.')
    parser.add_argument('--file', required=True, help='Path for output CSV file')
    parser.add_argument('--role', required=False, help='IAM role that script can assume in other accounts')
    try:
        args = parser.parse_args()
        file = args.file
        arole = args.role
    except NameError:
        logging.error("Required arguments are missing. Please provide path for the file")

    if os.path.exists(file):
        raise Exception("File already exists!")
    else:
        main()
