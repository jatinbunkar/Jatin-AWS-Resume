import boto3
import logging

# Enable Logging
logging.basicConfig(filename='CheckIAMRole.log', level=logging.INFO)

# List of account IDs and corresponding names to check for IAM role
accounts_to_check = {
    "381492023353": "Data-QA",
    "892702780526": "Data-Sandbox",
    "696797908185": "DevOps-Sandbox",
    "359213114362": "digital-sandbox",
    "562921113857": "ES-Integrations-Sandbox",
    "467483468017": "finance-sandbox",
    "590183650851": "iam-dev",
    "905418011955": "iam-prod",
    "420829356349": "Retail-Sandbox",
    "78144640723": "Sandbox-01",
    "183631329617": "UNFI Threat Emulation"
}

# The IAM role name to check for
role_name = "SnapshotsAccountAccessRole"

# Function to check if the IAM role exists in the account
def check_iam_role(account_id, account_name, role_name):
    sts = boto3.client('sts')
    try:
        # Try to assume the role
        role_arn = f"arn:aws:iam::{account_id}:role/{role_name}"
        assume_role_object = sts.assume_role(
            RoleArn=role_arn,
            RoleSessionName='AssumingRoleCheckSession'
        )
        # If successful, log the success
        logging.info(f"Account {account_name} ({account_id}) has the role {role_name}.")
        print(f"Account {account_name} ({account_id}) has the role {role_name}.")
    except sts.exceptions.ClientError as err:
        if "AccessDenied" in str(err):
            # Log that access is denied and the role is missing
            logging.info(f"Account {account_name} ({account_id}) does not have the role {role_name}.")
            print(f"Account {account_name} ({account_id}) does not have the role {role_name}.")
        else:
            # Log other errors
            logging.error(f"Error occurred while assuming role in account {account_name} ({account_id}): {err}")
            print(f"Error occurred while assuming role in account {account_name} ({account_id}): {err}")

def main():
    # Loop through the list of accounts to check the role
    for account_id, account_name in accounts_to_check.items():
        check_iam_role(account_id, account_name, role_name)

if __name__ == '__main__':
    main()
